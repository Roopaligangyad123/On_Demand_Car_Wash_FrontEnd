{"ast":null,"code":"var _jsxFileName = \"C:\\\\Car Wash System Main File\\\\On-demand-car-wash-system-frontend\\\\src\\\\Payment Component\\\\PaymentOpen.js\";\n// import React, { Component } from \"react\";\n// import PaymentService from \"./PaymentService\";\n// export default class PaymentOpen extends Component {\n//   state = {\n//     amount: \"\",\n//   };\n//   onHandleChange = (event) => {\n//     this.setState({\n//       [event.target.name]: event.target.value,\n//     });\n//   };\n//   componentDidMount() {\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://securegw-stage.paytm.in/order/process\";\n//     script.async = true;\n//     document.body.appendChild(script);\n//   }\n//   onSubmit = (e) => {\n//     e.preventDefault();\n//     let orderDetail = { amount: this.state.amount };\n//     PaymentService.createOrder(orderDetail).then((res) => {\n//       console.log(\"PAYMENT ORDER RESPONSE\", res);\n//       var options = {\n//         key: \"1zpvDlDD4fNpaT#A\", // Enter the Key ID generated from the Dashboard\n//         amount: res.data.amount,\n//         currency: \"INR\",\n//         name: \"Green Wash\",\n//         //description: \"Seat Reservation\",\n//         // \"image\": \"https://example.com/your_logo\",\n//         order_id: res.data.id,\n//         handler: function (response) {\n//           console.log(response);\n//           alert(\"Payment Successfull !!!\");\n//           window.location.href = \"/\";\n//         },\n//         prefill: {\n//           name: \"\",\n//           email: \"\",\n//           contact: \"\",\n//         },\n//         notes: {\n//           address: \"Green Wash\",\n//         },\n//         theme: {\n//           color: \"#26a69a\",\n//         },\n//       };\n//       var rzp1 = new window.Razorpay(options);\n//       rzp1.open();\n//     });\n//   };\n//   render() {\n//     return (\n//       <div>\n//         <form\n//           style={{\n//             backgroundColor: \"#488AC7\",\n//             width: \"500px\",\n//             height: \"400px\",\n//             marginLeft: \"500px\",\n//             marginTop: \"150px\",\n//           }}\n//         >\n//           <br />\n//           <br />\n//           <div className=\"form-outline mb-4\">\n//             <label className=\"form-label\" htmlFor=\"form2Example1\">\n//               <b>Enter Amount</b>\n//             </label>\n//             <input\n//               type=\"text\"\n//               id=\"form2Example1\"\n//               className=\"form-control\"\n//               placeholder=\"In Rupees\"\n//               name=\"amount\"\n//               value={this.state.amount}\n//               onChange={this.onHandleChange}\n//             />\n//           </div>\n//           <button\n//             type=\"button\"\n//             className=\"btn btn-success btn-block mb-4\"\n//             onClick={this.onSubmit}\n//           >\n//             Procced To Pay\n//           </button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\nimport React, { Component } from 'react';\nimport CONFIG from '../../mocks/merchant-config';\nimport { CheckoutProvider, Checkout } from 'paytm-blink-checkout-react';\nimport InjectedCheckout from './injected-checkout';\nconst USE_EXISTING_CHECKOUT_INSTANCE = 'Use existing checkout instance : ';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.textAreaRef = React.createRef();\n\n    this.notifyMerchantHandler = (eventType, data) => {\n      console.log('MERCHANT NOTIFY LOG', eventType, data);\n    };\n\n    this.renderUpdateConfig = () => {\n      this.setState({\n        config: this.getUpdatedConfig()\n      });\n    };\n\n    this.toggleOpenInPopup = () => {\n      this.setState((prevState, _) => ({\n        openInPopup: !prevState.openInPopup\n      }));\n    };\n\n    this.toggleCheckout = () => {\n      this.setState((prevState, _) => ({\n        showCheckout: !prevState.showCheckout\n      }));\n    };\n\n    this.loadCheckoutScript = () => {\n      const url = 'https://pgp-hotfix.paytm.in/merchantpgpui/checkoutjs/merchants/';\n      const scriptElement = document.createElement('script');\n      scriptElement.async = true;\n      scriptElement.src = url.concat(CONFIG.merchant.mid);\n      scriptElement.type = 'application/javascript';\n\n      scriptElement.onload = () => {\n        const checkoutJsInstance = this.getCheckoutJsObj();\n\n        if (checkoutJsInstance && checkoutJsInstance.onLoad) {\n          checkoutJsInstance.onLoad(() => {\n            this.setState({\n              config: this.getUpdatedConfig(),\n              checkoutJsInstance\n            });\n          });\n        } else {\n          console.error(USE_EXISTING_CHECKOUT_INSTANCE + 'onload not available!');\n        }\n      };\n\n      scriptElement.onerror = error => {\n        console.error(USE_EXISTING_CHECKOUT_INSTANCE + 'script load fail!');\n      };\n\n      document.body.appendChild(scriptElement);\n    };\n\n    this.state = {\n      config: this.appendHandler(CONFIG),\n      showCheckout: false,\n      openInPopup: true,\n      checkoutJsInstance: null\n    };\n  }\n\n  appendHandler(config) {\n    const newConfig = { ...config\n    };\n    newConfig.handler = {\n      notifyMerchant: this.notifyMerchantHandler\n    };\n    return newConfig;\n  }\n\n  getUpdatedConfig() {\n    const config = this.parse(this.textAreaRef.current.value);\n    return this.appendHandler(config);\n  }\n\n  parse(value) {\n    try {\n      return JSON.parse(value);\n    } catch (err) {\n      console.error(\"Invalid config JSON\");\n      return {};\n    }\n  }\n\n  getCheckoutJsObj() {\n    if (window && window.Paytm && window.Paytm.CheckoutJS) {\n      return window.Paytm.CheckoutJS;\n    } else {\n      console.error(USE_EXISTING_CHECKOUT_INSTANCE + 'Checkout instance not found!');\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      showCheckout,\n      openInPopup,\n      config\n    } = this.state;\n    const textAreaVal = JSON.stringify(config, null, 4);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      cols: \"50\",\n      rows: \"25\",\n      defaultValue: textAreaVal,\n      ref: this.textAreaRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.toggleCheckout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }\n    }, \"Toggle Checkout Screen\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.renderUpdateConfig,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }, \"Re-render updated config\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.loadCheckoutScript,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    }, \"Use existing checkout instance\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      onClick: this.toggleOpenInPopup,\n      defaultChecked: openInPopup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }\n    }), \" Open in popup\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 14\n      }\n    }, \"CHECKOUT VISIBILITY :\"), \" \", showCheckout.toString()), /*#__PURE__*/React.createElement(CheckoutProvider, {\n      config: this.state.config,\n      checkoutJsInstance: this.state.checkoutJsInstance,\n      openInPopup: openInPopup,\n      env: \"STAGE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InjectedCheckout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }\n    }), showCheckout && /*#__PURE__*/React.createElement(Checkout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 28\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Car Wash System Main File/On-demand-car-wash-system-frontend/src/Payment Component/PaymentOpen.js"],"names":["React","Component","CONFIG","CheckoutProvider","Checkout","InjectedCheckout","USE_EXISTING_CHECKOUT_INSTANCE","App","constructor","props","textAreaRef","createRef","notifyMerchantHandler","eventType","data","console","log","renderUpdateConfig","setState","config","getUpdatedConfig","toggleOpenInPopup","prevState","_","openInPopup","toggleCheckout","showCheckout","loadCheckoutScript","url","scriptElement","document","createElement","async","src","concat","merchant","mid","type","onload","checkoutJsInstance","getCheckoutJsObj","onLoad","error","onerror","body","appendChild","state","appendHandler","newConfig","handler","notifyMerchant","parse","current","value","JSON","err","window","Paytm","CheckoutJS","render","textAreaVal","stringify","toString"],"mappings":"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","sourcesContent":["// import React, { Component } from \"react\";\n// import PaymentService from \"./PaymentService\";\n\n// export default class PaymentOpen extends Component {\n//   state = {\n//     amount: \"\",\n//   };\n\n//   onHandleChange = (event) => {\n//     this.setState({\n//       [event.target.name]: event.target.value,\n//     });\n//   };\n\n//   componentDidMount() {\n//     const script = document.createElement(\"script\");\n//     script.src = \"https://securegw-stage.paytm.in/order/process\";\n//     script.async = true;\n//     document.body.appendChild(script);\n//   }\n\n//   onSubmit = (e) => {\n//     e.preventDefault();\n//     let orderDetail = { amount: this.state.amount };\n\n//     PaymentService.createOrder(orderDetail).then((res) => {\n//       console.log(\"PAYMENT ORDER RESPONSE\", res);\n//       var options = {\n//         key: \"1zpvDlDD4fNpaT#A\", // Enter the Key ID generated from the Dashboard\n//         amount: res.data.amount,\n//         currency: \"INR\",\n//         name: \"Green Wash\",\n//         //description: \"Seat Reservation\",\n//         // \"image\": \"https://example.com/your_logo\",\n//         order_id: res.data.id,\n//         handler: function (response) {\n//           console.log(response);\n//           alert(\"Payment Successfull !!!\");\n//           window.location.href = \"/\";\n//         },\n//         prefill: {\n//           name: \"\",\n//           email: \"\",\n//           contact: \"\",\n//         },\n//         notes: {\n//           address: \"Green Wash\",\n//         },\n//         theme: {\n//           color: \"#26a69a\",\n//         },\n//       };\n//       var rzp1 = new window.Razorpay(options);\n//       rzp1.open();\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <form\n//           style={{\n//             backgroundColor: \"#488AC7\",\n//             width: \"500px\",\n//             height: \"400px\",\n//             marginLeft: \"500px\",\n//             marginTop: \"150px\",\n//           }}\n//         >\n//           <br />\n//           <br />\n//           <div className=\"form-outline mb-4\">\n//             <label className=\"form-label\" htmlFor=\"form2Example1\">\n//               <b>Enter Amount</b>\n//             </label>\n//             <input\n//               type=\"text\"\n//               id=\"form2Example1\"\n//               className=\"form-control\"\n//               placeholder=\"In Rupees\"\n//               name=\"amount\"\n//               value={this.state.amount}\n//               onChange={this.onHandleChange}\n//             />\n//           </div>\n//           <button\n//             type=\"button\"\n//             className=\"btn btn-success btn-block mb-4\"\n//             onClick={this.onSubmit}\n//           >\n//             Procced To Pay\n//           </button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\nimport React, { Component } from 'react';\nimport CONFIG from '../../mocks/merchant-config';\nimport { CheckoutProvider, Checkout } from 'paytm-blink-checkout-react';\nimport InjectedCheckout from './injected-checkout';\nconst USE_EXISTING_CHECKOUT_INSTANCE = 'Use existing checkout instance : ';\nclass App extends Component {\n  textAreaRef = React.createRef();\n  constructor(props) {\n    super(props);\n    this.state = {\n      config: this.appendHandler(CONFIG),\n      showCheckout: false,\n      openInPopup: true,\n      checkoutJsInstance: null\n    };\n  }\n  appendHandler(config) {\n    const newConfig = { ...config };\n    newConfig.handler = {\n      notifyMerchant: this.notifyMerchantHandler\n    }\n    return newConfig;\n  }\n  notifyMerchantHandler = (eventType, data) => {\n    console.log('MERCHANT NOTIFY LOG', eventType, data);\n  }\n  renderUpdateConfig = () => {\n    this.setState({\n      config: this.getUpdatedConfig()\n    });\n  }\n  getUpdatedConfig() {\n    const config = this.parse(this.textAreaRef.current.value);\n    return this.appendHandler(config);\n  }\n  parse(value) {\n    try {\n      return JSON.parse(value)\n    }\n    catch (err) {\n      console.error(\"Invalid config JSON\");\n      return {};\n    }\n  }\n  toggleOpenInPopup = () => {\n    this.setState((prevState, _) => ({\n      openInPopup: !prevState.openInPopup\n    }));\n  }\n  toggleCheckout = () => {\n    this.setState((prevState, _) => ({\n      showCheckout: !prevState.showCheckout\n    }));\n  }\n  loadCheckoutScript = () => {\n    const url = 'https://pgp-hotfix.paytm.in/merchantpgpui/checkoutjs/merchants/';\n    const scriptElement = document.createElement('script');\n    scriptElement.async = true;\n    scriptElement.src = url.concat(CONFIG.merchant.mid);\n    scriptElement.type = 'application/javascript';\n    scriptElement.onload = () => {\n      const checkoutJsInstance = this.getCheckoutJsObj();\n      if (checkoutJsInstance && checkoutJsInstance.onLoad) {\n        checkoutJsInstance.onLoad(() => {\n          this.setState({\n            config: this.getUpdatedConfig(),\n            checkoutJsInstance\n          });\n        });\n      }\n      else {\n        console.error(USE_EXISTING_CHECKOUT_INSTANCE + 'onload not available!');\n      }\n    };\n    scriptElement.onerror = error => {\n      console.error(USE_EXISTING_CHECKOUT_INSTANCE + 'script load fail!');\n    }\n    document.body.appendChild(scriptElement);\n  }\n  getCheckoutJsObj() {\n    if (window && window.Paytm && window.Paytm.CheckoutJS) {\n      return window.Paytm.CheckoutJS;\n    }\n    else {\n      console.error(USE_EXISTING_CHECKOUT_INSTANCE + 'Checkout instance not found!');\n    }\n    return null;\n  }\n  render() {\n    const { showCheckout, openInPopup, config } = this.state;\n    const textAreaVal = JSON.stringify(config, null, 4);\n    return (\n      <div>\n        <textarea cols=\"50\"\n          rows=\"25\"\n          defaultValue={textAreaVal}\n          ref={this.textAreaRef} />\n        <div>\n          <button type=\"button\"\n            onClick={this.toggleCheckout}>\n            Toggle Checkout Screen\n          </button>\n          <button type=\"button\"\n            onClick={this.renderUpdateConfig}>\n            Re-render updated config\n          </button>\n          <button type=\"button\"\n            onClick={this.loadCheckoutScript}>\n            Use existing checkout instance\n          </button>\n          <input type=\"checkbox\" onClick={this.toggleOpenInPopup}\n            defaultChecked={openInPopup}>\n          </input> Open in popup\n        </div>\n        <br />\n        <div><b>CHECKOUT VISIBILITY :</b> {showCheckout.toString()}</div>\n        <CheckoutProvider config={this.state.config}\n          checkoutJsInstance={this.state.checkoutJsInstance}\n          openInPopup={openInPopup} \n          env=\"STAGE\">\n          <InjectedCheckout />\n          {showCheckout && <Checkout />}\n        </CheckoutProvider>\n      </div>\n    );\n  }\n}\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}