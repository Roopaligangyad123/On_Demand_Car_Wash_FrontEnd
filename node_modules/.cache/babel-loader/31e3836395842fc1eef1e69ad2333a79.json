{"ast":null,"code":"var _jsxFileName = \"C:\\\\Car Wash System Main File\\\\On-demand-car-wash-system-frontend\\\\src\\\\components\\\\AcceptOrder.js\";\nimport React from \"react\";\n\nconst AcceptOrder = () => {\n  const [submitting, setSubmitting] = React.useState(false);\n  const [submitted, setSubmitted] = React.useState(false);\n  const [formData, setFormData] = React.useState({\n    text: ''\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSubmitting(true); // Fake send post data\n\n    setTimeout(() => {\n      setSubmitted(true);\n    }, 1000);\n  };\n\n  const handleApprove = () => {\n    // Send PUT request to update your post.\n    let navigate = useNavigate();\n    useEffect(() => {\n      fetch(\"http://localhost:8081/order/allorders\").then(result => {\n        result.json().then(resp => {\n          setWashers(resp);\n        });\n      });\n    }, []);\n  };\n\n  const handleReject = () => {// Send PUT request to update your post.\n  };\n\n  if (submitted) {\n    return /*#__PURE__*/React.createElement(Revision, {\n      formData: formData,\n      handleApprove: handleApprove,\n      handleReject: handleReject,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 14\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(Form, {\n      submitting: submitting,\n      handleSubmit: handleSubmit,\n      formData: formData,\n      setFormData: setFormData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }\n    });\n  }\n}; //   ReactDOM.render(\n//     <App />,\n//     document.getElementById('container')\n//   );\n\n\nconst Form = _ref => {\n  let {\n    submitting,\n    handleSubmit,\n    formData,\n    setFormData\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    required: true,\n    value: formData.text,\n    onChange: e => setFormData({\n      text: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, submitting ? 'Sending...' : 'Save'));\n};\n\nconst Revision = _ref2 => {\n  let {\n    formData\n  } = _ref2;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"Your sucess message...\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, formData.text), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Approve\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"Reject\"));\n};\n\nexport default AcceptOrder;","map":{"version":3,"sources":["C:/Car Wash System Main File/On-demand-car-wash-system-frontend/src/components/AcceptOrder.js"],"names":["React","AcceptOrder","submitting","setSubmitting","useState","submitted","setSubmitted","formData","setFormData","text","handleSubmit","e","preventDefault","setTimeout","handleApprove","navigate","useNavigate","useEffect","fetch","then","result","json","resp","setWashers","handleReject","Form","target","value","Revision"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst AcceptOrder = () => {\r\n    const [submitting, setSubmitting] = React.useState(false)\r\n    const [submitted, setSubmitted] = React.useState(false)\r\n    const [formData, setFormData] = React.useState({text: ''})\r\n    \r\n    const handleSubmit = (e) => {\r\n      e.preventDefault()\r\n      setSubmitting(true)\r\n      // Fake send post data\r\n      setTimeout(() => {\r\n        setSubmitted(true)\r\n      }, 1000)\r\n    }\r\n    \r\n    const handleApprove = () => {\r\n      // Send PUT request to update your post.\r\n      let navigate = useNavigate();\r\n      useEffect(() => {\r\n        fetch(\"http://localhost:8081/order/allorders\").then((result) => {\r\n          result.json().then((resp) => {\r\n            setWashers(resp);\r\n          });\r\n        });\r\n      }, []);\r\n    }\r\n    \r\n    const handleReject = () => {\r\n      // Send PUT request to update your post.\r\n    }\r\n    \r\n    if (submitted) {\r\n      return <Revision\r\n        formData={formData}\r\n        handleApprove={handleApprove}\r\n        handleReject={handleReject}\r\n      />\r\n    } else {\r\n      return <Form \r\n        submitting={submitting}\r\n        handleSubmit={handleSubmit} \r\n        formData={formData}\r\n        setFormData={setFormData}\r\n      />\r\n    }\r\n  }\r\n  \r\n//   ReactDOM.render(\r\n//     <App />,\r\n//     document.getElementById('container')\r\n//   );\r\n\r\nconst Form = ({submitting, handleSubmit, formData, setFormData}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n      <input \r\n        type=\"text\" \r\n        required\r\n        value={formData.text} \r\n        onChange={(e) => setFormData({text: e.target.value})}\r\n      />\r\n      <br />\r\n      <button type=\"submit\">{submitting ? 'Sending...' : 'Save'}</button>\r\n    </form>\r\n  }\r\n  \r\n  const Revision = ({formData}) => {\r\n    return <div>\r\n      <p>Your sucess message...</p>\r\n      <p>{formData.text }</p>\r\n      <button>Approve</button>\r\n      <button>Reject</button>\r\n    </div>\r\n  }\r\n  export default AcceptOrder;\r\n  \r\n  \r\n"]},"metadata":{},"sourceType":"module"}